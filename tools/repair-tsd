#!/usr/bin/env python3

from subprocess import Popen, PIPE, TimeoutExpired, check_output
from random import shuffle
from multiprocessing import Pool
import copy
import time
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import logging

log = logging.getLogger("repair-tsd")
log.setLevel(logging.INFO)
ch = logging.StreamHandler()
logformat = '%(asctime)s %(name)s %(levelname)s %(message)s'
formatter = logging.Formatter(logformat)
ch.setFormatter(formatter)
log.addHandler(ch)


def get_metrics(args):
    """
    Collect all metrics from OpenTSDB

    :returns: all metrics
    :rtype: list
    """
    time_chunk = args.get("time_chunk", 15)
    multiplier = int(60 / time_chunk)
    time_range = args.get("time_range", 48)
    tsd_path = args.get("tsd_path", "/usr/share/opentsdb/bin/tsdb")
    cfg_path = args.get("cfg_path", "/etc/opentsdb/opentsdb.conf")
    use_sudo = args.get("use_sudo", False)
    sudo_user = args.get("sudo_user", "opentsdb")
    base = "{} fsck --config={}".format(tsd_path, cfg_path)
    check_cmd = "{} uid --config={} metrics".format(tsd_path, cfg_path)
    if use_sudo:
        base = "sudo -u {} {}".format(sudo_user, base)
        check_cmd = "sudo -u {} {}".format(sudo_user, check_cmd)
    metricobj = {"time_chunk": time_chunk,
                 "timeout": int(time_chunk * 60),
                 "retries": args.get("retries", 1),
                 "multiplier": multiplier,
                 "chunk_count": time_range * multiplier,
                 "base": base, "check_cmd": check_cmd}
    cmd = '{} uid --config={} grep metrics ".*"'.format(tsd_path,
                                                        cfg_path)
    proc = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
    results = proc.communicate()
    metriclist = [m.split(" ")[1].strip(":")
                  for m in results[0].decode().split("\n") if m]
    metrics = []
    for m in metriclist:
        if not m or m == "\x00":
            continue
        metric = copy.deepcopy(metricobj)
        metric["metric"] = m
        metrics.append(metric)
    if args.get("shuffle", False):
        shuffle(metrics)
    log.info("There are {} metrics to process".format(len(metrics)))
    return metrics


def repair_metric_chunk(metricobj, chunk):
    """
    Repair one 'chunk' of data for a metric
    """
    metric = metricobj["metric"]
    time_chunk = metricobj["time_chunk"]
    base = metricobj["base"]
    timeout = metricobj["timeout"]
    chunk_count = metricobj["chunk_count"]
    log.debug("Running chunk {} for {}".format(chunk, metric))
    if chunk < 2:
        timestr = "{}m-ago".format(time_chunk)
    else:
        timestr = "{}m-ago {}m-ago".format((chunk + 1) * time_chunk,
                                           chunk * time_chunk)
    cmd = "{} {} sum".format(base, timestr)
    """
    Even though we're chunking, it's worth trying things more than once
    """
    for x in range(1, metricobj["retries"] + 2):
        log.debug("Repair try {} for {}".format(x, timestr))
        fullcmd = "{} {} --fix-all --compact".format(cmd, metric)
        log.debug("Full command: {}".format(fullcmd))
        metricproc = Popen(fullcmd, shell=True, stdout=PIPE, stderr=PIPE)
        try:
            results, err = metricproc.communicate(timeout=timeout)
        except TimeoutExpired:
            log.warning("{}: chunk {} failed in window (run {})".format(metric,
                                                                        chunk,
                                                                        x))
            continue
        except Exception as e:
            log.error("{} general exception :: {}".format(metric,
                                                          e))
        else:
            results = [r for r in results.decode().split("\n") if r][-26:]
            final_results = []
            """
            We'll only collect results that are non-0
            since we're not super interested in stuff that didn't change.
            """
            for r in results:
                # Strip the timestamp from the log line
                line = r.split(" ")[6:]
                try:
                    if int(line[-1]) != 0:
                        final_results.append(" ".join(line))
                except Exception:
                    final_results.append(" ".join(line))
            result_str = "\n".join(final_results)
            log.debug("{} results:\n{}".format(metric, result_str))
            if chunk % 20 == 0:
                log.debug("Chunk {} of {} finished".format(chunk, chunk_count))
            return None
    else:
        log.error("Failed to completely repair {}".format(metric))
        return metric


def process_metric(metricobj):
    """
    Run fsck on a list of metrics over a time range
    """
    metric = metricobj["metric"]
    chunk_count = metricobj["chunk_count"]
    try:
        check_output("{} {}".format(metricobj["check_cmd"], metric),
                     shell=True)
    except Exception:
        log.warning("{} doesn't exist! Skipping...".format(metric))
        return None
    log.info("Repairing {} in {} chunks".format(metric, chunk_count))
    start_time = time.time()
    for x in range(1, chunk_count + 1):
        failed = repair_metric_chunk(metricobj, x)
        if failed:
            return metric
    runtime = time.time() - start_time
    log.info("{} repair took {} seconds".format(metric,
                                                int(runtime)))


def process_metrics(metric_list):
    threads = Pool(4)
    failed_metrics = threads.map(process_metric, metric_list)
    failed_metrics = [m for m in failed_metrics if m]
    log.warning("Failed metrics: {}".format(failed_metrics))
    return failed_metrics


def cli_opts():
    parser = ArgumentParser(description="Repair all OpenTSDB metrics",
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("--debug", action="store_true", default=False,
                        help="Show debug information")
    parser.add_argument("--time-range", default="48",
                        help="How many hours of time we collect to repair")
    parser.add_argument("--time-chunk", default="15",
                        help="How many minutes of data to scan per chunk")
    parser.add_argument("--retries", default="1",
                        help="How many times we should try failed metrics")
    parser.add_argument("--tsd-path", default="/usr/share/opentsdb/bin/tsdb",
                        help="Path to the OpenTSDB CLI binary")
    parser.add_argument("--cfg-path", default="/etc/opentsdb/opentsdb.conf",
                        help="Path to OpenTSDB config")
    parser.add_argument("--store-path", default="/tmp/opentsdb-fsck.list",
                        help="Path to OpenTSDB config")
    parser.add_argument("--use-sudo", action="store_true",
                        default=False,
                        help="switch user when running repairs?")
    parser.add_argument("--shuffle", action="store_true",
                        default=False,
                        help="Mix up incoming metric order")
    parser.add_argument("--sudo-user", default="opentsdb",
                        help="User to switch to...")
    return parser.parse_args()


def main():
    args = cli_opts()
    if args.debug:
        log.setLevel(logging.DEBUG)
    try:
        time_range = int(args.time_range)
    except Exception as e:
        log.error("Invalid time range {} :: {}".format(args.time_range, e))
    try:
        retries = int(args.retries)
    except Exception as e:
        log.error("Invalid retry number {} :: {}".format(args.retries, e))
    try:
        time_chunk = int(args.time_chunk)
        if 60 % time_chunk != 0:
            raise ArithmeticError
    except Exception as e:
        log.error("Invalid time chunk {} :: {}".format(args.retries, e))

    metric_list = get_metrics({"time_range": time_range,
                               "use_sudo": args.use_sudo,
                               "sudo_user": args.sudo_user,
                               "time_chunk": time_chunk,
                               "tsd_path": args.tsd_path,
                               "cfg_path": args.cfg_path,
                               "store_path": args.store_path,
                               "shuffle": args.shuffle,
                               "retries": retries})
    process_metrics(metric_list)


if __name__ == "__main__":
    main()
